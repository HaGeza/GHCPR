import argparse
import json
import os

GHCPR_TAG = "\n<!-- Generated by GHCPR -->\n"
GHCPR_BOT_NAME = "ghcprbot"


def get_commits_json(repo: str, page: int) -> list:
    os.system(
        f"""gh api -H "Accept: application/vnd.github+json" \
    -H "X-GitHub-Api-Version: 2022-11-28" \
    --method GET /repos/{repo}/commits \
    -f per_page=100 -f page={page} > tmp.json"""
    )
    with open("tmp.json", "r") as f:
        data = json.load(f)
    os.remove("tmp.json")
    return data


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "repo", type=str, help="Name of the repository in the format 'owner/repo'"
    )
    parser.add_argument(
        "readme_path",
        type=str,
        help="Path to the README.md file",
        default="README.md",
        nargs="?",
    )
    args = parser.parse_args()

    author_commits = {}
    page = 1

    while True:
        data = get_commits_json(args.repo, page)
        if not data:
            break
        page += 1

        for commit in data:
            if "author" not in commit or commit["author"] is None:
                continue
            if "login" not in commit["author"]:
                continue

            author = commit["author"]["login"]
            if author == GHCPR_BOT_NAME or author is None:
                continue

            author_commits[author] = author_commits.get(author, 0) + 1

    total_count = sum(author_commits.values())

    authors = list(author_commits.keys())
    proportions = [round(author_commits[key] / total_count, 4) for key in authors]
    proportions[-1] = 1 - sum(proportions[:-1])

    header = "See [proportion of commits by authors](#proportion-of-commits-by-authors) generated by [GHCPR](https://github.com/HaGeza/GHCPR)"
    chart_title = "### Proportion of commits by authors\n\n"
    mermaid_chart = f"```mermaid\npie\n"
    for author, proportion in zip(authors, proportions):
        mermaid_chart += f'\t"{author}": {int(proportion * 1000)}\n'
    mermaid_chart += "```"

    try:
        with open(args.readme_path, "r") as f:
            content = f.read()
            if GHCPR_TAG in content:
                content = content.split(GHCPR_TAG)[1]
    except FileNotFoundError:
        raise FileNotFoundError(f"File {args.readme_path} not found")

    with open(args.readme_path, "w") as f:
        f.write(header)
        f.write(GHCPR_TAG)
        f.write(content)
        f.write(GHCPR_TAG)
        f.write(chart_title)
        f.write(mermaid_chart)
