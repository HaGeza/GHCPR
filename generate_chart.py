import argparse

GHCPR_TAG = "\n<!-- Generated by GHCPR -->\n"
GHCPR_BOT_NAME = "GHCPR_BOT"

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "commit_authors", type=str, help="Path to the commit authors file"
    )
    parser.add_argument(
        "readme_path",
        type=str,
        help="Path to the README.md file",
        default="README.md",
        nargs="?",
    )
    args = parser.parse_args()

    author_names = {}
    author_commits = {}
    with open(args.commit_authors, "r") as f:
        lines = f.readlines()
        for line in lines:
            name = line.strip()
            if name == GHCPR_BOT_NAME:
                continue

            key = name.lower()
            author_commits[key] = author_commits.get(key, 0) + 1
            if key not in author_names:
                author_names[key] = name

    total_count = sum(author_commits.values())

    authors = list(author_names.values())
    proportions = [
        round(author_commits[key] / total_count, 4) for key in author_names.keys()
    ]
    proportions[-1] = 1 - sum(proportions[:-1])

    chart_title = "### [GHCPR](https://github.com/HaGeza/GHCPR): Proportion of commits by authors\n\n"
    mermaid_chart = f"```mermaid\npie\n"
    for author, proportion in zip(authors, proportions):
        mermaid_chart += f'\t"{author}": {int(proportion * 1000)}\n'
    mermaid_chart += "```"

    try:
        with open(args.readme_path, "r") as f:
            content = f.read()
            if GHCPR_TAG in content:
                content = content.split(GHCPR_TAG)[1]
    except FileNotFoundError:
        raise FileNotFoundError(f"File {args.readme_path} not found")

    with open(args.readme_path, "w") as f:
        f.write("See [proportion of commits by authors](#ghcpr)")
        f.write(GHCPR_TAG)
        f.write(content)
        f.write(GHCPR_TAG)
        f.write(chart_title)
        f.write(mermaid_chart)
